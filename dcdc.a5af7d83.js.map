{"version":3,"sources":["index.js"],"names":["container","document","querySelector","canvas","createElement","width","height","style","transform","window","devicePixelRatio","transformOrigin","appendChild","ctx","getContext","drawText","text","x0","y0","size","dir","align","color","rotate","save","translate","x","y","length","textBaseline","horizontal","vertical","textAlign","fillStyle","font","split","ch","fillText","restore","choose","choices","sum","map","v","value","weight","reduce","a","b","n","Math","random","parts","randomness","step","deltas","Array","fill","splitted","i","begin","round","end","push","substring","interp","divide","uniform","min","max","x1","y1","scatter","val","opposite","mirrored","balanced","splitOptions","fontOptions","dist","forEach","part","clear","fillRect","f","neutral","position","point","delta","activeA","angle","PI","rx","ry","frame","fn","setInterval"],"mappings":"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","file":"dcdc.a5af7d83.js","sourceRoot":"..","sourcesContent":["const container = document.querySelector('#container');\nconst canvas = document.createElement('canvas');\ncanvas.width = 1920;\ncanvas.height = 1080;\ncanvas.style.transform = `scale(${1 / window.devicePixelRatio})`;\ncanvas.style.transformOrigin = 'left top';\ncontainer.appendChild(canvas);\n\nconst ctx = canvas.getContext('2d');\n\nconst drawText = (text, x0, y0, {\n    size = 20, dir = 'horizontal', align = 'begin', color = '#000', rotate = 0,\n} = {}) => {\n    ctx.save();\n    ctx.translate(x0, y0);\n    ctx.rotate(rotate);\n    let x = 0, y = 0;\n    if (align === 'middle') {\n        switch (dir) {\n            case 'horizontal':\n                x -= size * text.length / 2;\n                break;\n            case 'vertical':\n                y -= size * text.length / 2;\n                break;\n        }\n    }\n    if (align === 'end') {\n        switch (dir) {\n            case 'horizontal':\n                x -= size * text.length;\n                break;\n            case 'vertical':\n                y -= size * text.length;\n                break;\n        }\n    }\n    ctx.textBaseline = { horizontal: 'middle', vertical: 'top' }[dir];\n    ctx.textAlign = { horizontal: 'start', vertical: 'center' }[dir];\n    ctx.fillStyle = color;\n    ctx.font = `bold ${size}px \\'Hiragino Mincho Pro\\'`;\n    for (const ch of text.split('')) {\n        ctx.fillText(ch, x, y);\n        switch (dir) {\n            case 'horizontal':\n                x += size;\n                break;\n            case 'vertical':\n                y += size;\n                break;\n        }\n    }\n    ctx.restore();\n}\n\nconst choose = (...choices) => {\n    choices = choices.map(v => typeof v === 'object' ? v : { value: v });\n    const sum = choices.map(({ weight = 1 }) => weight).reduce((a, b) => a + b);\n    let n = Math.random() * sum;\n    for (const { value, weight = 1 } of choices) {\n        if (weight >= n) return value;\n        else n -= weight;\n    }\n    return choices[choices.length - 1].value;\n}\n\nconst split = (text, parts, { randomness = 2 } = {}) => {\n    const step = text.length / parts;\n    const deltas = [0, ...new Array(parts - 1).fill(0).map(() => (Math.random() - 0.5) * 2 * randomness), 0];\n    const splitted = [];\n    for (let i = 0; i < parts; ++i) {\n        const begin = Math.round(i * step + deltas[i]);\n        const end = Math.round((i + 1) * step + deltas[i + 1]);\n        splitted.push(text.substring(begin, end));\n    }\n    return splitted;\n}\n\nconst width = 1920;\nconst height = 1080;\n\nconst interp = (a, b, dir = 'horizontal') => {\n    switch (dir) {\n        case 'horizontal': return {\n            x: a * width, y: b * height,\n        }\n        case 'vertical': return {\n            x: b * width, y: a * height,\n        }\n    }\n}\n\nconst divide = (parts, i) => {\n    return 1 / (parts + 1) * (i + 1);\n}\n\nconst uniform = (min, max) => {\n    return Math.random() * (max - min) + min;\n}\n\nconst translate = ({ x: x1, y: y1 }, { x: x2, y: y2 }) => {\n    return { x: x1 + x2, y: y1 + y2 };\n}\n\nconst scatter = (val, dir, opposite = false, mirrored = false) => {\n    if (opposite) dir = { vertical: 'horizontal', horizontal: 'vertical' }[dir];\n    switch (dir) {\n        case 'horizontal': return {\n            x: mirrored ? -val : val, y: 0,\n        }\n        case 'vertical': return {\n            x: 0, y: val,\n        }\n    }\n}\n\nconst balanced = (text, { size, splitOptions = {}, fontOptions = {} }) => {\n    const parts = text.length > 12 ? 2 : choose({ value: 1, weight: 0.7 }, { value: 2, weight: 0.3 });\n    const dir = choose('vertical', 'horizontal');\n    const dist = uniform(0.6, 0.8);\n    split(text, parts, splitOptions).forEach((part, i) => {\n        const { x, y } = interp(0.5, (divide(parts, i) - 0.5) * dist + 0.5, dir);\n        drawText(part, x, y, { size, dir, align: 'middle', ...fontOptions });\n    });\n}\n\nconst clear = () => {\n    ctx.fillStyle = 'rgba(242, 242, 242, 0.3)';\n    ctx.fillRect(0, 0, width, height);\n}\n\nconst opposite = (n, f) => {\n    return f ? 1 - n : n;\n}\n\nconst neutral = (text, { size, splitOptions = {}, fontOptions = {} }) => {\n    const parts = 2;\n    const dir = choose('vertical', 'horizontal');\n    const align = choose('begin', 'end');\n    const position = choose('left', 'right');\n    const [x0, x1] = choose(\n        { value: [0.35, 0.43], weight: 3 },\n        { value: [0.25, 0.35], weight: 2 },\n        { value: [0.1, 0.25], weight: 1 });\n    const x = opposite(uniform(0.1, 0.25), align === 'end');\n    const y = opposite(uniform(x0, x1), position === 'right');\n    let point = interp(x, y, dir);\n    const delta = scatter(size * 1.5 * (position === 'left' ? 1 : -1), dir, true);\n    split(text, parts, splitOptions).forEach((part) => {\n        const { x, y } = point;\n        drawText(part, x, y, { size, dir, align, ...fontOptions });\n        point = translate(point, delta);\n    });\n}\n\nconst activeA = (text, { size, splitOptions = {}, fontOptions = {} } = {}) => {\n    const parts = 2;\n    const angle = Math.PI * uniform(-0.1, 0);\n    const dir = choose('horizontal', 'vertical');\n    const [x0, x1] = choose(\n        { value: [0.25, 0.35], weight: 3 },\n        { value: [0.35, 0.45], weight: 2 },\n        { value: [0.45, 0.50], weight: 0.5 },\n    );\n    const a = uniform(x0, x1);\n    const [y0, y1] = choose(\n        { value: [0.15, 0.25], weight: 3 },\n        { value: [0.25, 0.4], weight: 2 },\n    );\n    const b = uniform(y0, y1);\n    split(text, parts, splitOptions).forEach((part, i) => {\n        const rx = opposite(a, i === 1);\n        const ry = opposite(b, i === 1);\n        const { x, y } = interp(rx, ry, dir);\n        drawText(part, x, y, { size, dir, rotate: angle, align: 'middle', ...fontOptions });\n    })\n}\n\nconst frame = () => {\n    clear();\n    const text = choose(\n        '被害妄想携帯女子',\n        'ジェットブーツで大気圏を突破して',\n        '短気呑気男子電気消さないで',\n        'ただいま参上！電波シスター☆',\n        '千本桜　夜ニ紛レ',\n        'にゃん　にゃん　にゃん　ステップ踏んで',\n        '太陽曰く燃えよカオス',\n        'インターネットが遅いさん',\n        'ごめん　ゆずれない　ゆずれない',\n        // ''\n    );\n    const options = { size: 90 };\n    const fn = choose(\n        balanced,\n        neutral,\n        activeA,\n    );\n    fn(text, options);\n}\n\nsetInterval(frame, 30);\n// frame();"]}